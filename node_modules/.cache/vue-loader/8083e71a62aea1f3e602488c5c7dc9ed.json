{"remainingRequest":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/decoration2/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/decoration2/src/main.vue","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhdXRvUmVzaXplIGZyb20gJy4uLy4uLy4uL21peGluL2F1dG9SZXNpemUnCgppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCcKCmltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEdkRlY29yYXRpb24yJywKICBtaXhpbnM6IFthdXRvUmVzaXplXSwKICBwcm9wczogewogICAgY29sb3I6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6ICgpID0+IChbXSkKICAgIH0sCiAgICByZXZlcnNlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgZHVyOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogNgogICAgfQogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICByZWY6ICdkZWNvcmF0aW9uLTInLAoKICAgICAgeDogMCwKICAgICAgeTogMCwKCiAgICAgIHc6IDAsCiAgICAgIGg6IDAsCgogICAgICBkZWZhdWx0Q29sb3I6IFsnIzNmYWFjYicsICcjZmZmJ10sCgogICAgICBtZXJnZWRDb2xvcjogW10KICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb2xvciAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VDb2xvciB9ID0gdGhpcwoKICAgICAgbWVyZ2VDb2xvcigpCiAgICB9LAogICAgcmV2ZXJzZSAoKSB7CiAgICAgIGNvbnN0IHsgY2FsY1NWR0RhdGEgfSA9IHRoaXMKCiAgICAgIGNhbGNTVkdEYXRhKCkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCAoKSB7CiAgICAgIGNvbnN0IHsgY2FsY1NWR0RhdGEgfSA9IHRoaXMKCiAgICAgIGNhbGNTVkdEYXRhKCkKICAgIH0sCiAgICBjYWxjU1ZHRGF0YSAoKSB7CiAgICAgIGNvbnN0IHsgcmV2ZXJzZSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcwoKICAgICAgaWYgKHJldmVyc2UpIHsKICAgICAgICB0aGlzLncgPSAxCiAgICAgICAgdGhpcy5oID0gaGVpZ2h0CiAgICAgICAgdGhpcy54ID0gd2lkdGggLyAyCiAgICAgICAgdGhpcy55ID0gMAogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudyA9IHdpZHRoCiAgICAgICAgdGhpcy5oID0gMQogICAgICAgIHRoaXMueCA9IDAKICAgICAgICB0aGlzLnkgPSBoZWlnaHQgLyAyCiAgICAgIH0KICAgIH0sCiAgICBvblJlc2l6ZSAoKSB7CiAgICAgIGNvbnN0IHsgY2FsY1NWR0RhdGEgfSA9IHRoaXMKCiAgICAgIGNhbGNTVkdEYXRhKCkKICAgIH0sCiAgICBtZXJnZUNvbG9yICgpIHsKICAgICAgY29uc3QgeyBjb2xvciwgZGVmYXVsdENvbG9yIH0gPSB0aGlzCgogICAgICB0aGlzLm1lcmdlZENvbG9yID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29sb3IsIHRydWUpLCBjb2xvciB8fCBbXSkKICAgIH0KICB9LAogIG1vdW50ZWQgKCkgewogICAgY29uc3QgeyBtZXJnZUNvbG9yIH0gPSB0aGlzCgogICAgbWVyZ2VDb2xvcigpCiAgfQp9Cg=="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration2/src","sourcesContent":["<template>\n  <div class=\"dv-decoration-2\" :ref=\"ref\">\n    <svg :width=\"`${width}px`\" :height=\"`${height}px`\">\n      <rect :x=\"x\" :y=\"y\" :width=\"w\" :height=\"h\" :fill=\"mergedColor[0]\">\n        <animate\n          :attributeName=\"reverse ? 'height' : 'width'\"\n          from=\"0\"\n          :to=\"reverse ? height : width\"\n          :dur=\"`${dur}s`\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".42,0,.58,1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n\n      <rect :x=\"x\" :y=\"y\" width=\"1\" height=\"1\" :fill=\"mergedColor[1]\">\n        <animate\n          :attributeName=\"reverse ? 'y' : 'x'\"\n          from=\"0\"\n          :to=\"reverse ? height : width\"\n          :dur=\"`${dur}s`\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.42,0,0.58,1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration2',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    reverse: {\n      type: Boolean,\n      default: false\n    },\n    dur: {\n      type: Number,\n      default: 6\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-2',\n\n      x: 0,\n      y: 0,\n\n      w: 0,\n      h: 0,\n\n      defaultColor: ['#3faacb', '#fff'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    },\n    reverse () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { reverse, width, height } = this\n\n      if (reverse) {\n        this.w = 1\n        this.h = height\n        this.x = width / 2\n        this.y = 0\n      } else {\n        this.w = width\n        this.h = 1\n        this.x = 0\n        this.y = height / 2\n      }\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]}]}