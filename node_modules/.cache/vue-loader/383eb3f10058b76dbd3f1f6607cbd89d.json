{"remainingRequest":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL2luZGV4JwoKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnCgppbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCcKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZQZXJjZW50UG9uZCcsCiAgcHJvcHM6IHsKICAgIGNvbmZpZzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSkKICAgIH0KICB9LAogIGRhdGEgKCkgewogICAgY29uc3QgaWQgPSB1dWlkKCkKICAgIHJldHVybiB7CiAgICAgIGdyYWRpZW50SWQxOiBgcGVyY2VudC1wb25kLWdyYWRpZW50SWQxLSR7aWR9YCwKICAgICAgZ3JhZGllbnRJZDI6IGBwZXJjZW50LXBvbmQtZ3JhZGllbnRJZDItJHtpZH1gLAoKICAgICAgd2lkdGg6IDAsCiAgICAgIGhlaWdodDogMCwKCiAgICAgIGRlZmF1bHRDb25maWc6IHsKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFsdWUKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IHZhbHVlID0gMAogICAgICAgICAqLwogICAgICAgIHZhbHVlOiAwLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb2xvcnMgKGhleHxyZ2J8cmdiYXxjb2xvciBrZXl3b3JkcykKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8U3RyaW5nPn0KICAgICAgICAgKiBAZGVmYXVsdCBjb2xvcnMgPSBbJyMwMEJBRkYnLCAnIzNERTdDOSddCiAgICAgICAgICogQGV4YW1wbGUgY29sb3JzID0gWycjMDAwJywgJ3JnYigwLCAwLCAwKScsICdyZ2JhKDAsIDAsIDAsIDEpJywgJ3JlZCddCiAgICAgICAgICovCiAgICAgICAgY29sb3JzOiBbJyMzREU3QzknLCAnIzAwQkFGRiddLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb3JkZXIgd2lkdGgKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IGJvcmRlcldpZHRoID0gMwogICAgICAgICAqLwogICAgICAgIGJvcmRlcldpZHRoOiAzLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBHYXAgYmV0d2VlbiBib3JkZXIgYW5kIHBvbmQKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IGJvcmRlckdhcCA9IDMKICAgICAgICAgKi8KICAgICAgICBib3JkZXJHYXA6IDMsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIExpbmUgZGFzaAogICAgICAgICAqIEB0eXBlIHtBcnJheTxOdW1iZXI+fQogICAgICAgICAqIEBkZWZhdWx0IGxpbmVEYXNoID0gWzUsIDFdCiAgICAgICAgICovCiAgICAgICAgbGluZURhc2g6IFs1LCAxXSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGV4dCBjb2xvcgogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICogQGRlZmF1bHQgdGV4dENvbG9yID0gJyNmZmYnCiAgICAgICAgICovCiAgICAgICAgdGV4dENvbG9yOiAnI2ZmZicsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJvcmRlciByYWRpdXMKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IGJvcmRlclJhZGl1cyA9IDUKICAgICAgICAgKi8KICAgICAgICBib3JkZXJSYWRpdXM6IDUsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIExvY2FsIEdyYWRpZW50CiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59CiAgICAgICAgICogQGRlZmF1bHQgbG9jYWxHcmFkaWVudCA9IGZhbHNlCiAgICAgICAgICogQGV4YW1wbGUgbG9jYWxHcmFkaWVudCA9IGZhbHNlIHwgdHJ1ZQogICAgICAgICAqLwogICAgICAgIGxvY2FsR3JhZGllbnQ6IGZhbHNlLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb3JtYXR0ZXIKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGZvcm1hdHRlciA9ICd7dmFsdWV9JScKICAgICAgICAgKi8KICAgICAgICBmb3JtYXR0ZXI6ICd7dmFsdWV9JScKICAgICAgfSwKCiAgICAgIG1lcmdlZENvbmZpZzogbnVsbAogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHJlY3RXaWR0aCAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VkQ29uZmlnLCB3aWR0aCB9ID0gdGhpcwoKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybiAwCgogICAgICBjb25zdCB7IGJvcmRlcldpZHRoIH0gPSBtZXJnZWRDb25maWcKCiAgICAgIHJldHVybiB3aWR0aCAtIGJvcmRlcldpZHRoCiAgICB9LAogICAgcmVjdEhlaWdodCAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VkQ29uZmlnLCBoZWlnaHQgfSA9IHRoaXMKCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gMAoKICAgICAgY29uc3QgeyBib3JkZXJXaWR0aCB9ID0gbWVyZ2VkQ29uZmlnCgogICAgICByZXR1cm4gaGVpZ2h0IC0gYm9yZGVyV2lkdGgKICAgIH0sCiAgICBwb2ludHMgKCkgewogICAgICBjb25zdCB7IG1lcmdlZENvbmZpZywgd2lkdGgsIGhlaWdodCB9ID0gdGhpcwoKICAgICAgY29uc3QgaGFsZkhlaWdodCA9IGhlaWdodCAvIDIKCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gYDAsICR7aGFsZkhlaWdodH0gMCwgJHtoYWxmSGVpZ2h0fWAKCiAgICAgIGNvbnN0IHsgYm9yZGVyV2lkdGgsIGJvcmRlckdhcCwgdmFsdWUgfSA9IG1lcmdlZENvbmZpZwoKICAgICAgY29uc3QgcG9seWxpbmVMZW5ndGggPSAod2lkdGggLSAoYm9yZGVyV2lkdGggKyBib3JkZXJHYXApICogMikgLyAxMDAgKiB2YWx1ZQoKICAgICAgcmV0dXJuIGAKICAgICAgICAke2JvcmRlcldpZHRoICsgYm9yZGVyR2FwfSwgJHtoYWxmSGVpZ2h0fQogICAgICAgICR7Ym9yZGVyV2lkdGggKyBib3JkZXJHYXAgKyBwb2x5bGluZUxlbmd0aH0sICR7aGFsZkhlaWdodCArIDAuMDAxfQogICAgICBgCiAgICB9LAogICAgcG9seWxpbmVXaWR0aCAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VkQ29uZmlnLCBoZWlnaHQgfSA9IHRoaXMKCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gMAoKICAgICAgY29uc3QgeyBib3JkZXJXaWR0aCwgYm9yZGVyR2FwIH0gPSBtZXJnZWRDb25maWcKCiAgICAgIHJldHVybiBoZWlnaHQgLSAoYm9yZGVyV2lkdGggKyBib3JkZXJHYXApICogMgogICAgfSwKICAgIGxpbmVhckdyYWRpZW50ICgpIHsKICAgICAgY29uc3QgeyBtZXJnZWRDb25maWcgfSA9IHRoaXMKCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gW10KCiAgICAgIGNvbnN0IHsgY29sb3JzIH0gPSBtZXJnZWRDb25maWcKCiAgICAgIGNvbnN0IGNvbG9yTnVtID0gY29sb3JzLmxlbmd0aAoKICAgICAgY29uc3QgY29sb3JPZmZzZXRHYXAgPSAxMDAgLyAoY29sb3JOdW0gLSAxKQoKICAgICAgcmV0dXJuIGNvbG9ycy5tYXAoKGMsIGkpID0+IFtjb2xvck9mZnNldEdhcCAqIGksIGNdKQogICAgfSwKICAgIHBvbHlsaW5lR3JhZGllbnQgKCkgewogICAgICBjb25zdCB7IGdyYWRpZW50SWQxLCBncmFkaWVudElkMiwgbWVyZ2VkQ29uZmlnIH0gPSB0aGlzCgogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIGdyYWRpZW50SWQyCgogICAgICBpZiAobWVyZ2VkQ29uZmlnLmxvY2FsR3JhZGllbnQpIHJldHVybiBncmFkaWVudElkMQoKICAgICAgcmV0dXJuIGdyYWRpZW50SWQyCiAgICB9LAogICAgZ3JhZGllbnQyWFBvcyAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VkQ29uZmlnIH0gPSB0aGlzCgogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuICcxMDAlJwoKICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gbWVyZ2VkQ29uZmlnCgogICAgICByZXR1cm4gYCR7MjAwIC0gdmFsdWV9JWAKICAgIH0sCiAgICBkZXRhaWxzICgpIHsKICAgICAgY29uc3QgeyBtZXJnZWRDb25maWcgfSA9IHRoaXMKCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gJycKCiAgICAgIGNvbnN0IHsgdmFsdWUsIGZvcm1hdHRlciB9ID0gbWVyZ2VkQ29uZmlnCgogICAgICByZXR1cm4gZm9ybWF0dGVyLnJlcGxhY2UoJ3t2YWx1ZX0nLCB2YWx1ZSkKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb25maWcgKCkgewogICAgICBjb25zdCB7IG1lcmdlQ29uZmlnIH0gPSB0aGlzCgogICAgICBtZXJnZUNvbmZpZygpCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBpbml0ICgpIHsKICAgICAgY29uc3QgeyBpbml0V0gsIGNvbmZpZywgbWVyZ2VDb25maWcgfSA9IHRoaXMKCiAgICAgIGF3YWl0IGluaXRXSCgpCgogICAgICBpZiAoIWNvbmZpZykgcmV0dXJuCgogICAgICBtZXJnZUNvbmZpZygpCiAgICB9LAogICAgYXN5bmMgaW5pdFdIICgpIHsKICAgICAgY29uc3QgeyAkbmV4dFRpY2ssICRyZWZzIH0gPSB0aGlzCgogICAgICBhd2FpdCAkbmV4dFRpY2soKQoKICAgICAgY29uc3QgeyBjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0IH0gPSAkcmVmc1sncGVyY2VudC1wb25kJ10KCiAgICAgIHRoaXMud2lkdGggPSBjbGllbnRXaWR0aAogICAgICB0aGlzLmhlaWdodCA9IGNsaWVudEhlaWdodAogICAgfSwKICAgIG1lcmdlQ29uZmlnICgpIHsKICAgICAgY29uc3QgeyBjb25maWcsIGRlZmF1bHRDb25maWcgfSA9IHRoaXMKCiAgICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29uZmlnLCB0cnVlKSwgY29uZmlnIHx8IHt9KQogICAgfQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICBjb25zdCB7IGluaXQgfSA9IHRoaXMKCiAgICBpbml0KCkKICB9Cn0K"},{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]}]}