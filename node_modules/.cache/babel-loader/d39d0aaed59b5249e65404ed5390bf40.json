{"remainingRequest":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/babel-loader/lib/index.js!/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/decoration12/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/@jiaminghi/data-view/lib/components/decoration12/src/main.vue","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wjcwjc/Desktop/大学/大三上/2020301人立方/hcube-b/hcube-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL3dqY3dqYy9EZXNrdG9wL1x1NTkyN1x1NUI2Ni9cdTU5MjdcdTRFMDlcdTRFMEEvMjAyMDMwMVx1NEVCQVx1N0FDQlx1NjVCOS9oY3ViZS1iL2hjdWJlLWNsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBhdXRvUmVzaXplIGZyb20gJy4uLy4uLy4uL21peGluL2F1dG9SZXNpemUnOwppbXBvcnQgeyB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9pbmRleCc7CmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcENsb25lLCBnZXRDaXJjbGVSYWRpYW5Qb2ludCB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJzsKaW1wb3J0IHsgZmFkZSB9IGZyb20gJ0BqaWFtaW5naGkvY29sb3InOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0R2RGVjb3JhdGlvbjEyJywKICBtaXhpbnM6IFthdXRvUmVzaXplXSwKICBwcm9wczogewogICAgY29sb3I6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEBkZXNjcmlwdGlvbiBTY2FuIGFuaW1hdGlvbiBkdXIKICAgICAqLwogICAgc2NhbkR1cjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDMKICAgIH0sCgogICAgLyoqCiAgICAgKiBAZGVzY3JpcHRpb24gSGFsbyBhbmltYXRpb24gZHVyCiAgICAgKi8KICAgIGhhbG9EdXI6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAyCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIGlkID0gdXVpZCgpOwogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnZGVjb3JhdGlvbi0xMicsCiAgICAgIGdJZDogImRlY29yYXRpb24tMTItZy0iLmNvbmNhdChpZCksCiAgICAgIGdyYWRpZW50SWQ6ICJkZWNvcmF0aW9uLTEyLWdyYWRpZW50LSIuY29uY2F0KGlkKSwKICAgICAgZGVmYXVsdENvbG9yOiBbJyMyNzgzY2UnLCAnIzJjZjdmZSddLAogICAgICBtZXJnZWRDb2xvcjogW10sCiAgICAgIHBhdGhEOiBbXSwKICAgICAgcGF0aENvbG9yOiBbXSwKICAgICAgY2lyY2xlUjogW10sCiAgICAgIHNwbGl0TGluZVBvaW50czogW10sCiAgICAgIGFyY0Q6IFtdLAogICAgICBzZWdtZW50OiAzMCwKICAgICAgc2VjdG9yQW5nbGU6IE1hdGguUEkgLyAzLAogICAgICByaW5nTnVtOiAzLAogICAgICByaW5nV2lkdGg6IDEsCiAgICAgIHNob3dTcGxpdExpbmU6IHRydWUKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKCkgewogICAgICB2YXIgbWVyZ2VDb2xvciA9IHRoaXMubWVyZ2VDb2xvcjsKICAgICAgbWVyZ2VDb2xvcigpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHg6IGZ1bmN0aW9uIHgoKSB7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgIHJldHVybiB3aWR0aCAvIDI7CiAgICB9LAogICAgeTogZnVuY3Rpb24geSgpIHsKICAgICAgdmFyIGhlaWdodCA9IHRoaXMuaGVpZ2h0OwogICAgICByZXR1cm4gaGVpZ2h0IC8gMjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIHZhciBtZXJnZUNvbG9yID0gdGhpcy5tZXJnZUNvbG9yLAogICAgICAgICAgY2FsY1BhdGhEID0gdGhpcy5jYWxjUGF0aEQsCiAgICAgICAgICBjYWxjUGF0aENvbG9yID0gdGhpcy5jYWxjUGF0aENvbG9yLAogICAgICAgICAgY2FsY0NpcmNsZVIgPSB0aGlzLmNhbGNDaXJjbGVSLAogICAgICAgICAgY2FsY1NwbGl0TGluZVBvaW50cyA9IHRoaXMuY2FsY1NwbGl0TGluZVBvaW50cywKICAgICAgICAgIGNhbGNBcmNEID0gdGhpcy5jYWxjQXJjRDsKICAgICAgbWVyZ2VDb2xvcigpOwogICAgICBjYWxjUGF0aEQoKTsKICAgICAgY2FsY1BhdGhDb2xvcigpOwogICAgICBjYWxjQ2lyY2xlUigpOwogICAgICBjYWxjU3BsaXRMaW5lUG9pbnRzKCk7CiAgICAgIGNhbGNBcmNEKCk7CiAgICB9LAogICAgbWVyZ2VDb2xvcjogZnVuY3Rpb24gbWVyZ2VDb2xvcigpIHsKICAgICAgdmFyIGNvbG9yID0gdGhpcy5jb2xvciwKICAgICAgICAgIGRlZmF1bHRDb2xvciA9IHRoaXMuZGVmYXVsdENvbG9yOwogICAgICB0aGlzLm1lcmdlZENvbG9yID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29sb3IsIHRydWUpLCBjb2xvciB8fCBbXSk7CiAgICB9LAogICAgY2FsY1BhdGhEOiBmdW5jdGlvbiBjYWxjUGF0aEQoKSB7CiAgICAgIHZhciB4ID0gdGhpcy54LAogICAgICAgICAgeSA9IHRoaXMueSwKICAgICAgICAgIHdpZHRoID0gdGhpcy53aWR0aCwKICAgICAgICAgIHNlZ21lbnQgPSB0aGlzLnNlZ21lbnQsCiAgICAgICAgICBzZWN0b3JBbmdsZSA9IHRoaXMuc2VjdG9yQW5nbGU7CiAgICAgIHZhciBzdGFydEFuZ2xlID0gLU1hdGguUEkgLyAyOwogICAgICB2YXIgYW5nbGVHYXAgPSBzZWN0b3JBbmdsZSAvIHNlZ21lbnQ7CiAgICAgIHZhciByID0gd2lkdGggLyA0OwogICAgICB2YXIgbGFzdEVuZFBvaW50cyA9IGdldENpcmNsZVJhZGlhblBvaW50KHgsIHksIHIsIHN0YXJ0QW5nbGUpOwogICAgICB0aGlzLnBhdGhEID0gbmV3IEFycmF5KHNlZ21lbnQpLmZpbGwoJycpLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICAgIHZhciBlbmRQb2ludHMgPSBnZXRDaXJjbGVSYWRpYW5Qb2ludCh4LCB5LCByLCBzdGFydEFuZ2xlIC0gKGkgKyAxKSAqIGFuZ2xlR2FwKS5tYXAoZnVuY3Rpb24gKF8pIHsKICAgICAgICAgIHJldHVybiBfLnRvRml4ZWQoNSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGQgPSAiTSIuY29uY2F0KGxhc3RFbmRQb2ludHMuam9pbignLCcpLCAiIEEiKS5jb25jYXQociwgIiwgIikuY29uY2F0KHIsICIgMCAwIDAgIikuY29uY2F0KGVuZFBvaW50cy5qb2luKCcsJykpOwogICAgICAgIGxhc3RFbmRQb2ludHMgPSBlbmRQb2ludHM7CiAgICAgICAgcmV0dXJuIGQ7CiAgICAgIH0pOwogICAgfSwKICAgIGNhbGNQYXRoQ29sb3I6IGZ1bmN0aW9uIGNhbGNQYXRoQ29sb3IoKSB7CiAgICAgIHZhciBfdGhpcyRtZXJnZWRDb2xvciA9IF9zbGljZWRUb0FycmF5KHRoaXMubWVyZ2VkQ29sb3IsIDEpLAogICAgICAgICAgY29sb3IgPSBfdGhpcyRtZXJnZWRDb2xvclswXSwKICAgICAgICAgIHNlZ21lbnQgPSB0aGlzLnNlZ21lbnQ7CgogICAgICB2YXIgY29sb3JHYXAgPSAxMDAgLyAoc2VnbWVudCAtIDEpOwogICAgICB0aGlzLnBhdGhDb2xvciA9IG5ldyBBcnJheShzZWdtZW50KS5maWxsKGNvbG9yKS5tYXAoZnVuY3Rpb24gKF8sIGkpIHsKICAgICAgICByZXR1cm4gZmFkZShjb2xvciwgMTAwIC0gaSAqIGNvbG9yR2FwKTsKICAgICAgfSk7CiAgICB9LAogICAgY2FsY0NpcmNsZVI6IGZ1bmN0aW9uIGNhbGNDaXJjbGVSKCkgewogICAgICB2YXIgc2VnbWVudCA9IHRoaXMuc2VnbWVudCwKICAgICAgICAgIHJpbmdOdW0gPSB0aGlzLnJpbmdOdW0sCiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgICByaW5nV2lkdGggPSB0aGlzLnJpbmdXaWR0aDsKICAgICAgdmFyIHJhZGl1c0dhcCA9ICh3aWR0aCAvIDIgLSByaW5nV2lkdGggLyAyKSAvIHJpbmdOdW07CiAgICAgIHRoaXMuY2lyY2xlUiA9IG5ldyBBcnJheShyaW5nTnVtKS5maWxsKDApLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICAgIHJldHVybiByYWRpdXNHYXAgKiAoaSArIDEpOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjU3BsaXRMaW5lUG9pbnRzOiBmdW5jdGlvbiBjYWxjU3BsaXRMaW5lUG9pbnRzKCkgewogICAgICB2YXIgeCA9IHRoaXMueCwKICAgICAgICAgIHkgPSB0aGlzLnksCiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgIHZhciBhbmdsZUdhcCA9IE1hdGguUEkgLyA2OwogICAgICB2YXIgciA9IHdpZHRoIC8gMjsKICAgICAgdGhpcy5zcGxpdExpbmVQb2ludHMgPSBuZXcgQXJyYXkoNikuZmlsbCgnJykubWFwKGZ1bmN0aW9uIChfLCBpKSB7CiAgICAgICAgdmFyIHN0YXJ0QW5nbGUgPSBhbmdsZUdhcCAqIChpICsgMSk7CiAgICAgICAgdmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIE1hdGguUEk7CiAgICAgICAgdmFyIHN0YXJ0UG9pbnQgPSBnZXRDaXJjbGVSYWRpYW5Qb2ludCh4LCB5LCByLCBzdGFydEFuZ2xlKTsKICAgICAgICB2YXIgZW5kUG9pbnQgPSBnZXRDaXJjbGVSYWRpYW5Qb2ludCh4LCB5LCByLCBlbmRBbmdsZSk7CiAgICAgICAgcmV0dXJuICIiLmNvbmNhdChzdGFydFBvaW50LmpvaW4oJywnKSwgIiAiKS5jb25jYXQoZW5kUG9pbnQuam9pbignLCcpKTsKICAgICAgfSk7CiAgICB9LAogICAgY2FsY0FyY0Q6IGZ1bmN0aW9uIGNhbGNBcmNEKCkgewogICAgICB2YXIgeCA9IHRoaXMueCwKICAgICAgICAgIHkgPSB0aGlzLnksCiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgIHZhciBhbmdsZUdhcCA9IE1hdGguUEkgLyA2OwogICAgICB2YXIgciA9IHdpZHRoIC8gMiAtIDE7CiAgICAgIHRoaXMuYXJjRCA9IG5ldyBBcnJheSg0KS5maWxsKCcnKS5tYXAoZnVuY3Rpb24gKF8sIGkpIHsKICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IGFuZ2xlR2FwICogKDMgKiBpICsgMSk7CiAgICAgICAgdmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGFuZ2xlR2FwOwogICAgICAgIHZhciBzdGFydFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgc3RhcnRBbmdsZSk7CiAgICAgICAgdmFyIGVuZFBvaW50ID0gZ2V0Q2lyY2xlUmFkaWFuUG9pbnQoeCwgeSwgciwgZW5kQW5nbGUpOwogICAgICAgIHJldHVybiAiTSIuY29uY2F0KHN0YXJ0UG9pbnQuam9pbignLCcpLCAiIEEiKS5jb25jYXQoeCwgIiwgIikuY29uY2F0KHksICIgMCAwIDEgIikuY29uY2F0KGVuZFBvaW50LmpvaW4oJywnKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdDogZnVuY3Rpb24gYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0KCkgewogICAgICB2YXIgaW5pdCA9IHRoaXMuaW5pdDsKICAgICAgaW5pdCgpOwogICAgfSwKICAgIGZhZGU6IGZhZGUKICB9Cn07"},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <defs>\n        <g :id=\"gId\">\n          <path\n            :stroke=\"pathColor[i]\"\n            :stroke-width=\"width / 2\"\n            fill=\"transparent\"\n            v-for=\"(d, i) in pathD\"\n            :key=\"d\"\n            :d=\"d\"\n          />\n        </g>\n\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\n        </radialGradient>\n      </defs>\n\n      <circle\n        v-for=\"r in circleR\"\n        :key=\"r\"\n        :r=\"r\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :stroke=\"mergedColor[1]\"\n        :stroke-width=\"0.5\"\n        fill=\"transparent\"\n      />\n\n      <circle\n        r=\"1\"\n        :cx=\"x\"\n        :cy=\"y\"\n        stroke=\"transparent\"\n        :fill=\"`url(#${gradientId})`\"\n      >\n        <animate\n          attributeName=\"r\"\n          :values=\"`1;${width / 2}`\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          values=\"1;0\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        r=\"2\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :fill=\"mergedColor[1]\"\n      />\n\n      <g v-if=\"showSplitLine\">\n        <polyline\n          v-for=\"p in splitLinePoints\"\n          :key=\"p\"\n          :points=\"p\"\n          :stroke=\"mergedColor[1]\"\n          :stroke-width=\"0.5\"\n          opacity=\"0.5\"\n        />\n      </g>\n\n      <path\n        v-for=\"d in arcD\"\n        :key=\"d\"\n        :d=\"d\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        fill=\"transparent\"\n      />\n\n      <use :xlink:href=\"`#${gId}`\">\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\n          :dur=\"`${scanDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n    </svg>\n\n    <div class=\"decoration-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n\n      defaultColor: ['#2783ce', '#2cf7fe'],\n\n      mergedColor: [],\n\n      pathD: [],\n\n      pathColor: [],\n\n      circleR: [],\n\n      splitLinePoints: [],\n\n      arcD: [],\n\n      segment: 30,\n\n      sectorAngle: Math.PI / 3,\n\n      ringNum: 3,\n\n      ringWidth: 1,\n\n      showSplitLine: true\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  computed: {\n    x () {\n      const { width } = this\n\n      return width / 2\n    },\n    y () {\n      const { height } = this\n\n      return height / 2\n    }\n  },\n  methods: {\n    init () {\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\n\n      mergeColor()\n\n      calcPathD()\n\n      calcPathColor()\n\n      calcCircleR()\n\n      calcSplitLinePoints()\n\n      calcArcD()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    calcPathD () {\n      const { x, y, width, segment, sectorAngle } = this\n\n      const startAngle = -Math.PI / 2\n      const angleGap = sectorAngle / segment\n      const r = width / 4\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\n\n      this.pathD = new Array(segment)\n        .fill('')\n        .map((_, i) => {\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\n          lastEndPoints = endPoints\n\n          return d\n        })\n    },\n    calcPathColor () {\n      const { mergedColor: [color], segment } = this\n\n      const colorGap = 100 / (segment - 1)\n\n      this.pathColor = new Array(segment)\n        .fill(color)\n        .map((_, i) => fade(color, 100 - i * colorGap))\n    },\n    calcCircleR () {\n      const { segment, ringNum, width, ringWidth } = this\n\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\n\n      this.circleR = new Array(ringNum)\n        .fill(0)\n        .map((_, i) => radiusGap * (i + 1))\n    },\n    calcSplitLinePoints () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2\n\n      this.splitLinePoints = new Array(6)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (i + 1)\n          const endAngle = startAngle + Math.PI\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\n        })\n    },\n    calcArcD () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2 - 1\n\n      this.arcD = new Array(4)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (3 * i + 1)\n          const endAngle = startAngle + angleGap\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\n        })\n    },\n    afterAutoResizeMixinInit () {\n      const { init } = this\n\n      init()\n    },\n    fade\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration12/src"}]}